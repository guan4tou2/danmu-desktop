name: Build Electron App

on:
  push:
    branches:
      - main
    paths:
      - "danmu-desktop/package.json"
  workflow_dispatch:

jobs:
  check_version_change:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_version
        shell: bash
        run: |
          set -e
          VERSION=$(node -p "require('./danmu-desktop/package.json').version")
          echo "version=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        shell: bash
        run: |
          git fetch
          PREV_VERSION=$(git show HEAD~1:danmu-desktop/package.json | grep '"version"' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')
          CURR_VERSION=$(node -p "require('./danmu-desktop/package.json').version")

          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "Version changed: $PREV_VERSION -> $CURR_VERSION"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURR_VERSION"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_version_change
    if: needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd danmu-desktop
          npm install

      - name: Build Electron App
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          cd danmu-desktop
          npx electron-builder --config.extraMetadata.version=${{ needs.check_version_change.outputs.version }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Electron-App-${{ matrix.os }}
          path: danmu-desktop/pack/**/*

      - name: Create GitHub Release for Linux
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            danmu-desktop/pack/**/*danmu manager*-*.AppImage
            danmu-desktop/pack/**/*danmu manager*-*.deb
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Create GitHub Release for Windows
        if: matrix.os == 'windows-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            danmu-desktop/pack/**/*danmu manager*-*.exe
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: false

      - name: Create GitHub Release for macOS
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: |
            danmu-desktop/pack/**/*danmu manager*-*.dmg
            danmu-desktop/pack/**/*danmu manager*-*.zip
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            ## macOS Release v${{ needs.check_version_change.outputs.version }}

            ### Changes
            - 修复了弹幕爆炸效果
            - 优化了性能
            - 改进了用户界面

            ### Installation
            1. 下载 DMG 文件
            2. 打开 DMG 文件
            3. 将应用拖到 Applications 文件夹
            4. 首次运行时，请在终端执行：
            ```bash
            sudo xattr -r -d com.apple.quarantine 'danmu manager.app'
            ```
