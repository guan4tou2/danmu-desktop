name: Build Electron App

on:
  push:
    branches:
      - main
    paths:
      - "danmu-desktop/package.json"
  workflow_dispatch:

jobs:
  check_version_change:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: get_version
        shell: bash
        run: |
          set -e
          VERSION=$(node -p "require('./danmu-desktop/package.json').version")
          echo "version=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if version changed
        id: check
        shell: bash
        run: |
          git fetch
          PREV_VERSION=$(git show HEAD~1:danmu-desktop/package.json | grep '"version"' | head -n 1 | sed -E 's/.*"([^"]+)".*/\1/')
          CURR_VERSION=$(node -p "require('./danmu-desktop/package.json').version")

          if [ "$PREV_VERSION" != "$CURR_VERSION" ]; then
            echo "Version changed: $PREV_VERSION -> $CURR_VERSION"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Version unchanged: $CURR_VERSION"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_version_change
    if: needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd danmu-desktop
          npm install

      - name: Build Electron App
        shell: bash # This line is added
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APP_VERSION: ${{ needs.check_version_change.outputs.version }}
        run: |
          cd danmu-desktop
          npm run build:webpack

          if [ "$RUNNER_OS" == "Linux" ]; then
            npx electron-builder --linux --config.extraMetadata.version=$APP_VERSION
          elif [ "$RUNNER_OS" == "Windows" ]; then
            npx electron-builder --win --config.extraMetadata.version=$APP_VERSION
          elif [ "$RUNNER_OS" == "macOS" ]; then
            npx electron-builder --mac --arm64 --config.extraMetadata.version=$APP_VERSION
          fi

          echo "Listing packaged files in danmu-desktop/pack:"
          ls -R pack

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Electron-App-${{ matrix.os }}
          path: danmu-desktop/pack/**/*

      - name: Create GitHub Release for Linux
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: create_release_linux
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Find Linux AppImage
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: find_appimage
        run: |
          APPIMAGE_PATH=$(find danmu-desktop/pack -name "danmu manager*-*.AppImage" -type f)
          echo "appimage_path=$APPIMAGE_PATH" >> "$GITHUB_ENV"

      - name: Find Linux DEB
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: find_deb
        run: |
          DEB_PATH=$(find danmu-desktop/pack -name "danmu manager*-*.deb" -type f)
          echo "deb_path=$DEB_PATH" >> "$GITHUB_ENV"

      - name: Upload AppImage
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ${{ env.appimage_path }}
          asset_name: danmu manager-${{ needs.check_version_change.outputs.version }}-linux-x86_64.AppImage
          asset_content_type: application/octet-stream

      - name: Upload DEB
        if: matrix.os == 'ubuntu-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_linux.outputs.upload_url }}
          asset_path: ${{ env.deb_path }}
          asset_name: danmu manager-${{ needs.check_version_change.outputs.version }}-linux-amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Create GitHub Release for Windows
        if: matrix.os == 'windows-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: create_release_windows
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: false

      - name: Find Windows EXE
        if: matrix.os == 'windows-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: find_exe
        shell: bash
        run: |
          EXE_PATH=$(find danmu-desktop/pack -name "danmu manager*-*.exe" -type f)
          echo "exe_path=$EXE_PATH" >> "$GITHUB_ENV"

      - name: Upload EXE
        if: matrix.os == 'windows-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_windows.outputs.upload_url }}
          asset_path: ${{ env.exe_path }}
          asset_name: danmu manager-${{ needs.check_version_change.outputs.version }}-win-x64.exe
          asset_content_type: application/octet-stream

      - name: Create Release for macOS
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ needs.check_version_change.outputs.version }}
          name: Release v${{ needs.check_version_change.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            ## MacOS Installation
            First execute, run in terminal:
            ```bash
            sudo xattr -r -d com.apple.quarantine 'danmu manager.app'
            ```

      - name: Find DMG file
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: find_dmg
        env: # Add APP_VERSION to env
          APP_VERSION: ${{ needs.check_version_change.outputs.version }}
        run: |
          EXPECTED_DMG="danmu-desktop/pack/danmu manager-${APP_VERSION}-mac-arm64.dmg"
          if [ -f "$EXPECTED_DMG" ]; then
            echo "Found DMG: $EXPECTED_DMG"
            echo "dmg_path=$EXPECTED_DMG" >> "$GITHUB_ENV"
          else
            echo "Error: Expected DMG file $EXPECTED_DMG not found."
            ls -R danmu-desktop/pack # List available files for debugging
            exit 1
          fi

      - name: Find ZIP file
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        id: find_zip
        env: # Add APP_VERSION to env
          APP_VERSION: ${{ needs.check_version_change.outputs.version }}
        run: |
          EXPECTED_ZIP="danmu-desktop/pack/danmu manager-${APP_VERSION}-mac-arm64.zip"
          if [ -f "$EXPECTED_ZIP" ]; then
            echo "Found ZIP: $EXPECTED_ZIP"
            echo "zip_path=$EXPECTED_ZIP" >> "$GITHUB_ENV"
          else
            echo "Error: Expected ZIP file $EXPECTED_ZIP not found."
            ls -R danmu-desktop/pack # List available files for debugging
            exit 1
          fi

      - name: Upload DMG
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.dmg_path }}
          asset_name: danmu manager-${{ needs.check_version_change.outputs.version }}-mac-arm64.dmg
          asset_content_type: application/octet-stream

      - name: Upload ZIP
        if: matrix.os == 'macos-latest' && (needs.check_version_change.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.zip_path }}
          asset_name: danmu manager-${{ needs.check_version_change.outputs.version }}-mac-arm64.zip
          asset_content_type: application/zip
